<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %} Creation de contrat {% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
        {% block stylesheets %}
            {{ encore_entry_link_tags('app') }}
                {# title #}   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"> 
	  {# Text editor #}  <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>

        {% endblock %}

        {% block javascripts %}
            {{ encore_entry_script_tags('app') }}
        {% endblock %}
    </head>
    <body>
        {% block body %}
        
        
        
        
        
        
         <div class="container">
        <div class="page-header">
            <h1>Création de contrat <small>Entreprise X</small></h1>
        </div>
  {# <iframe id="contract-areaa" src="{{ asset('/code/contrat-de-maintenance.pdf') }}" style="width: 100%; height: 1000px;"></iframe>  #}

<div class="column" >
	<div class="container">
		<div class="toolbar">
			<div class="head">
				<input type="text" placeholder="Filename" value="untitled" id="filename">
				<select onchange="fileHandle(this.value); this.selectedIndex=0">
					<option value="" selected="" hidden="" disabled="">File</option>
					<option value="new">New file</option>
					<option value="txt">Save as txt</option>
					<option value="pdf">Save as pdf</option>
				</select>
				<select onchange="formatDoc('formatBlock', this.value); this.selectedIndex=0;">
					<option value="" selected="" hidden="" disabled="">Format</option>
					<option value="h1">Heading 1</option>
					<option value="h2">Heading 2</option>
					<option value="h3">Heading 3</option>
					<option value="h4">Heading 4</option>
					<option value="h5">Heading 5</option>
					<option value="h6">Heading 6</option>
					<option value="p">Paragraph</option>
				</select>
				<select onchange="formatDoc('fontSize', this.value); this.selectedIndex=0;">
					<option value="" selected="" hidden="" disabled="">Font size</option>
					<option value="1">Extra small</option>
					<option value="2">Small</option>
					<option value="3">Regular</option>
					<option value="4">Medium</option>
					<option value="5">Large</option>
					<option value="6">Extra Large</option>
					<option value="7">Big</option>
				</select>
				<div class="color">
					<span>Color</span>
					<input type="color" oninput="formatDoc('foreColor', this.value); this.value='#000000';">
				</div>
				<div class="color">
					<span>Background</span>
					<input type="color" oninput="formatDoc('hiliteColor', this.value); this.value='#000000';">
				</div>
			</div>
			<div class="btn-toolbar">
				<button onclick="formatDoc('bold')"><i class='bx bx-bold'></i></button>
				<button onclick="formatDoc('underline')"><i class='bx bx-underline' ></i></button>
				<button onclick="formatDoc('italic')"><i class='bx bx-italic' ></i></button>
				<button onclick="formatDoc('strikeThrough')"><i class='bx bx-strikethrough' ></i></button>
				<button onclick="formatDoc('justifyLeft')"><i class='bx bx-align-left' ></i></button>
				<button onclick="formatDoc('justifyCenter')"><i class='bx bx-align-middle' ></i></button>
				<button onclick="formatDoc('justifyRight')"><i class='bx bx-align-right' ></i></button>
				<button onclick="formatDoc('justifyFull')"><i class='bx bx-align-justify' ></i></button>
				<button onclick="formatDoc('insertOrderedList')"><i class='bx bx-list-ol' ></i></button>
				<button onclick="formatDoc('insertUnorderedList')"><i class='bx bx-list-ul' ></i></button>
				<button onclick="addLink()"><i class='bx bx-link' ></i></button>
				<button id="show-code" data-active="false">&lt;/&gt;</button>
			</div>
		</div>
		<div id="content" contenteditable="true" spellcheck="false">
			Ecrire ici.
      <div id="contract-areaa"></div>
		</div>
	</div>
</div>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script src="script.js"></script>

   {# text editor style #}   <style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
	font-family: 'Poppins', sans-serif;
}
li {
	margin-left: 16px;
}
a {
	cursor: pointer;
}
.container {
	max-width: 991px;
	width: 100%;
	background: #fff;
	border-radius: 8px;
	overflow: hidden;
}
.toolbar {
	padding: 16px;
	background: #eee;
}
.toolbar .head {
	display: flex;
	grid-gap: 10px;
	margin-bottom: 16px;
	flex-wrap: wrap;
}
.toolbar .head > input {
	max-width: 100px;
	padding: 6px 10px;
	border-radius: 6px;
	border: 2px solid #ddd;
	outline: none;
}
.toolbar .head select {
	background: #fff;
	border: 2px solid #ddd;
	border-radius: 6px;
	outline: none;
	cursor: pointer;
}
.toolbar .head .color {
	background: #fff;
	border: 2px solid #ddd;
	border-radius: 6px;
	outline: none;
	cursor: pointer;
	display: flex;
	align-items: center;
	grid-gap: 6px;
	padding: 0 10px;
}
.toolbar .head .color span {
	font-size: 14px;
}
.toolbar .head .color input {
	border: none;
	padding: 0;
	width: 26px;
	height: 26px;
	background: #fff;
	cursor: pointer;
}
.toolbar .head .color input::-moz-color-swatch {
	width: 20px;
	height: 20px;
	border: none;
	border-radius: 50%;
}
.toolbar .btn-toolbar {
	display: flex;
	flex-wrap: wrap;
	align-items: center;
	grid-gap: 10px;
}
.toolbar .btn-toolbar button {
	background: #fff;
	border: 2px solid #ddd;
	border-radius: 6px;
	cursor: pointer;
	width: 40px;
	height: 40px;
	display: flex;
	align-items: center;
	justify-content: center;
	font-size: 18px;
}
.toolbar .btn-toolbar button:hover {
	background: #f3f3f3;
}
#content {
	padding: 16px;
	outline: none;
	max-height: 500vh;
	overflow: auto;
}
#show-code[data-active="true"] {
	background: #eee;
}
</style>

{# script text editor #}<script>

function formatDoc(cmd, value=null) {
	if(value) {
		document.execCommand(cmd, false, value);
	} else {
		document.execCommand(cmd);
	}
}

function addLink() {
	const url = prompt('Insert url');
	formatDoc('createLink', url);
}

const content = document.getElementById('content');

content.addEventListener('mouseenter', function () {
	const a = content.querySelectorAll('a');
	a.forEach(item=> {
		item.addEventListener('mouseenter', function () {
			content.setAttribute('contenteditable', false);
			item.target = '_blank';
		})
		item.addEventListener('mouseleave', function () {
			content.setAttribute('contenteditable', true);
		})
	})
})

const showCode = document.getElementById('show-code');
let active = false;

showCode.addEventListener('click', function () {
	showCode.dataset.active = !active;
	active = !active
	if(active) {
		content.textContent = content.innerHTML;
		content.setAttribute('contenteditable', false);
	} else {
		content.innerHTML = content.textContent;
		content.setAttribute('contenteditable', true);
	}
})

const filename = document.getElementById('filename');

function fileHandle(value) {
	if(value === 'new') {
		content.innerHTML = '';
		filename.value = 'untitled';
	} else if(value === 'txt') {
		const blob = new Blob([content.innerText])
		const url = URL.createObjectURL(blob)
		const link = document.createElement('a');
		link.href = url;
		link.download = `${filename.value}.txt`;
		link.click();
	} else if(value === 'pdf') {
		html2pdf(content).save(filename.value);
	}
}

</script>


<br><br><br><br><br><br><br><br><br><br><br><br>
<div class="column" >

  <div class="flex-row">
        <div class="wrapper">
            <canvas id="signature-pad" width="200" height="100"></canvas>
        </div>
        <div class="clear-btn">
            <button id="clear"><span> Clear </span></button>
        </div>
        <div class="clear-btn">
            <button id="submit"><span> Submit </span></button>
        </div>
    </div>
</div>

   <style>
   
   @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&display=swap');
* {
    padding: 0;
    margin: 0;
    font-family: 'Poppins', sans-serif;
}

.flex-row {
    display: flex;
}
.wrapper {
    border: 1px solid #ffff;
    border-right: 0;
}
canvas#signature-pad {
    background: #ffff;
    width: 100%;
    height: 100%;
    cursor: crosshair;
}
button#clear {
    height: 100%;
    background: #00A2EC;
    border: 1px solid transparent;
    color: #fff;
    font-weight: 600;
    cursor: pointer;
}
button#clear span {
    transform: rotate(90deg);
    display: block;
}
button#submit {
    height: 100%;
    background: #50BBEC;
    border: 1px solid transparent;
    color: #fff;
    font-weight: 600;
    cursor: pointer;
}
button#submit span{
    transform: rotate(90deg);
    display: block;
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/signature_pad/1.3.5/signature_pad.min.js" integrity="sha512-kw/nRM/BMR2XGArXnOoxKOO5VBHLdITAW00aG8qK4zBzcLVZ4nzg7/oYCaoiwc8U9zrnsO9UHqpyljJ8+iqYiQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
  var canvas = document.getElementById("signature-pad");

  function resizeCanvas() {
      var ratio = Math.max(window.devicePixelRatio || 1, 1);
      canvas.width = canvas.offsetWidth * ratio;
      canvas.height = canvas.offsetHeight * ratio;
      canvas.getContext("2d").scale(ratio, ratio);
  }
  window.onresize = resizeCanvas;
  resizeCanvas();
  var signaturePad = new SignaturePad(canvas, {
   backgroundColor: 'rgb(250,250,250)'
  });

  document.getElementById("clear").addEventListener('click', function(){
   signaturePad.clear();
  });

  document.getElementById("submit").addEventListener('click', function(){
   var signatureData = signaturePad.toDataURL();
   var signatureImage = document.createElement("img");
   signatureImage.src = signatureData;
   document.getElementById("contract-areaa").appendChild(signatureImage);
  });

  if (myObject !== null && myObject !== undefined) {
    Object.entries(myObject).forEach(([key, value]) => {
    });
}
</script>

        
        
        
        
        
        
        {% endblock %}
                 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
                
    </body>
</html>
